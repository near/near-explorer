// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ActionMessage /> renders AddKey with permission FullAccess 1`] = `
Array [
  "component.transactions.ActionMessage.AddKey.new_key_added",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
  ": ed25519:BgXFiJS...",
  <p>
    component.transactions.ActionMessage.AddKey.with_permission_and_nounce
  </p>,
]
`;

exports[`<ActionMessage /> renders AddKey with permission function call to call any method 1`] = `
Array [
  "component.transactions.ActionMessage.AddKey.access_key_added_for_contract",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/stake"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      stake
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
  ": ed25519:BgXFiJS...",
  <p>
    component.transactions.ActionMessage.AddKey.with_permission_call_method_and_nounce
  </p>,
]
`;

exports[`<ActionMessage /> renders AddKey with permission function call to call specific methods 1`] = `
Array [
  "component.transactions.ActionMessage.AddKey.access_key_added_for_contract",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/stake"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      stake
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
  ": ed25519:BgXFiJS...",
  <p>
    component.transactions.ActionMessage.AddKey.with_permission_call_method_and_nounce
  </p>,
]
`;

exports[`<ActionMessage /> renders CreateAccount 1`] = `
Array [
  "component.transactions.ActionMessage.CreateAccount.new_account_created",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
]
`;

exports[`<ActionMessage /> renders DeleteAccount 1`] = `
Array [
  "component.transactions.ActionMessage.DeleteAccount.delete_account",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
  "component.transactions.ActionMessage.DeleteAccount.and_transfer_fund_to",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/near"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      near
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
]
`;

exports[`<ActionMessage /> renders DeleteKey 1`] = `"component.transactions.ActionMessage.DeleteKey.key_deleted"`;

exports[`<ActionMessage /> renders DeployContract 1`] = `
Array [
  "component.transactions.ActionMessage.DeployContract.contract_deployed",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
]
`;

exports[`<ActionMessage /> renders FunctionCall 1`] = `
Array [
  "component.transactions.ActionMessage.FunctionCall.called_method",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
]
`;

exports[`<ActionMessage /> renders FunctionCall with details 1`] = `
Array [
  "component.transactions.ActionMessage.FunctionCall.called_method",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver2.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver2.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
  <dl>
    <dt>
      component.transactions.ActionMessage.FunctionCall.arguments
    </dt>
    <dd>
      <div>
        <div
          style={
            Object {
              "display": "block",
              "height": "0px",
              "overflow": "hidden",
            }
          }
        >
          <textarea
            className="code-preview"
            readOnly={true}
            value="{
  \\"text\\": \\"when ico?\\"
}"
          />
        </div>
        <div
          onClick={[Function]}
        >
          <div
            style={
              Object {
                "float": "left",
              }
            }
          >
            button.show_more
          </div>
        </div>
      </div>
      <style
        jsx={true}
      >
        
        @import url("https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap");
        .code-preview {
          font-family: "Source Code Pro", monospace;
          background: #424957;
          color: white;
          padding: 20px;
          width: 100%;
          height: 99%;
        }
      
      </style>
    </dd>
  </dl>,
]
`;

exports[`<ActionMessage /> renders Stake 1`] = `
Array [
  "component.transactions.ActionMessage.Stake.staked",
  <span
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseOut={[Function]}
    onMouseOver={[Function]}
  >
    &lt;0.00001
     
    Ⓝ
  </span>,
  " ",
  "component.transactions.ActionMessage.Stake.with_key",
]
`;

exports[`<ActionMessage /> renders Transfer 1`] = `
Array [
  "component.transactions.ActionMessage.Transfer.transferred",
  <span
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseOut={[Function]}
    onMouseOver={[Function]}
  >
    &lt;0.00001
     
    Ⓝ
  </span>,
  "component.transactions.ActionMessage.Transfer.to",
  <span
    onClick={[Function]}
  >
    <a
      className="account-link"
      href="/accounts/receiver.test"
      onClick={[Function]}
      onMouseEnter={[Function]}
    >
      receiver.test
    </a>
  </span>,
  <style
    jsx={true}
  >
    
        .account-link {
          white-space: nowrap;
        }
      
  </style>,
]
`;
